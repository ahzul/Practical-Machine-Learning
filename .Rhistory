library(caret)
install.packages(caret)
install(caret)
library(rattle)
library(RColorBrewer)
library(rpart.plot)
library(randomForest)
install.packages(rattle)
install.packages(rpart.plot)
install.packages(randomForest)
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
library(rattle)
library(rpart.plot)
library(rpart.plot)
library(randomForest)
library(RColorBrewer)
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
install.packages("caret")
library(caret)
set.seed(12345)
trainUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTraining <- training[inTrain]
train <- read.csv ("pml-training.csv,header=TRUE)
train_used <- train[,c(8:11,37:49,60:68,84:86)]
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain]
exit
library(RColorBrewer)
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
train_part <- createDataPartition(train_used$classe, p=0.6, list=FALSE)
install.package("rattle")
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(grid)
library(randomForest)
install.packages("randomForest", dependencies = TRUE)
library(randomForest)
train_part <- createDataPartition(train_used$classe, p=0.6, list=FALSE)
library(caret)
train_part <- createDataPartition(train_used$classe, p=0.6, list=FALSE)
inTrain <- createDataPartition(training$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]
myTesting <- training[-inTrain, ]
dim(myTraining); dim(myTesting)
nzv <- nearZeroVar(myTraining, saveMetrics=TRUE)
myTraining <- myTraining[,nzv$nzv==FALSE]
nzv<- nearZeroVar(myTesting,saveMetrics=TRUE)
myTesting <- myTesting[,nzv$nzv==FALSE]
myTraining <- myTraining[c(-1)]
trainingV3 <- myTraining
for(i in 1:length(myTraining)) {
if( sum( is.na( myTraining[, i] ) ) /nrow(myTraining) >= .7) {
for(j in 1:length(trainingV3)) {
if( length( grep(names(myTraining[i]), names(trainingV3)[j]) ) == 1)  {
trainingV3 <- trainingV3[ , -j]
}
}
}
}
myTraining <- trainingV3
rm(trainingV3)
clean1 <- colnames(myTraining)
clean2 <- colnames(myTraining[, -58])
myTesting <- myTesting[clean1]
testing <- testing[clean2]
dim(myTesting)
dim(testing)
for (i in 1:length(testing) ) {
for(j in 1:length(myTraining)) {
if( length( grep(names(myTraining[i]), names(testing)[j]) ) == 1)  {
class(testing[j]) <- class(myTraining[i])
}
}
}
testing <- rbind(myTraining[2, -58] , testing)
testing <- testing[-1,]
set.seed(12345)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
library(rpart)
library(rpart.plot)
library(rpart.plot)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
ggplot(modFitA1)
install.package("rattle")
library(package, help, pos = 2, lib.loc = NULL,
character.only = FALSE, logical.return = FALSE,
warn.conflicts = TRUE, quietly = FALSE,
verbose = getOption("verbose"))
require(package, lib.loc = NULL, quietly = FALSE,
warn.conflicts = TRUE,
character.only = FALSE)
library(rpart)
library(rpart.plot)
install.packages("caret", dependencies = c("Depends","Suggests"))
library(rpart.plot)
fancyRpartPlot(modFitA1)
library("rpart", lib.loc="C:/Program Files/R/R-3.2.0/library")
library(rpart.plot)
library(plot.rpart)
library("randomForest", lib.loc="~/R/win-library/3.2")
install.packages("rpart.plot")
library(plot.rpart)
library(rpart.plot)
fancyRpartPlot(modFitA1)
install.packages("fancyRpartPlot")
fancyRpartPlot(modFitA1)
set.seed(12345)
modFitA1 <- rpart(classe ~ ., data=myTraining, method="class")
fancyRpartPlot(modFitA1)
install.package("rattle")
install.packages("rattle")
library(rattle)
library("rpart.plot", lib.loc="~/R/win-library/3.2")
install.packages("rattle")
library(rattle)
install.packages("rattle")
fancyRpartPlot(modFitA1)
library(rattle)
set.seed(12345)
fitControl <- trainControl(method = "repeatedcv", number = 5,repeats = 1)
install.packages("trainControl")
fitControl <- trainControl(method = "repeatedcv", number = 5,repeats = 1)
